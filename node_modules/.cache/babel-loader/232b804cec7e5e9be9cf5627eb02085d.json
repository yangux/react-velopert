{"ast":null,"code":"var _jsxFileName = \"/Users/sy/react-2021/react-velopert/src/161-IterationSample.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst IterationSample = () => {\n  _s();\n\n  const [names, setNames] = useState([{\n    id: 1,\n    text: '눈사람'\n  }, {\n    id: 2,\n    text: '얼음'\n  }, {\n    id: 3,\n    text: '눈'\n  }, {\n    id: 4,\n    text: '바람'\n  }]);\n  const [inputText, setInputText] = useState('');\n  const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id\n\n  const onChange = e => setInputText(e.target.value);\n\n  const onClick = () => {\n    const nextNames = names.concat({\n      // concat으로 새로운 배열을 만들어 불변성 유지 (vs. push)\n      id: nextId,\n      text: inputText\n    });\n    setNextId(nextId + 1);\n    setNames(nextNames);\n    setInputText('');\n  };\n\n  const onRemove = id => {\n    const nextNames = names.filter(name => name.id !== id);\n    setNames(nextNames);\n  };\n\n  const nameList = names.map(name => /*#__PURE__*/_jsxDEV(\"li\", {\n    onDoubleClick: () => onRemove(name.id),\n    children: name.text\n  }, name.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputText,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nameList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true);\n};\n\n_s(IterationSample, \"kHYMeOMiUmPljlRdGxlYuGSQuHk=\");\n\n_c = IterationSample;\nexport default IterationSample;\n\nvar _c;\n\n$RefreshReg$(_c, \"IterationSample\");","map":{"version":3,"sources":["/Users/sy/react-2021/react-velopert/src/161-IterationSample.js"],"names":["React","useState","IterationSample","names","setNames","id","text","inputText","setInputText","nextId","setNextId","onChange","e","target","value","onClick","nextNames","concat","onRemove","filter","name","nameList","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CACjC;AAAEI,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GADiC,EAEjC;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAFiC,EAGjC;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAHiC,EAIjC;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE;AAAf,GAJiC,CAAD,CAAlC;AAMA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC,CAR4B,CAQa;;AAEzC,QAAMU,QAAQ,GAAIC,CAAD,IAAOJ,YAAY,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAApC;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpB,UAAMC,SAAS,GAAGb,KAAK,CAACc,MAAN,CAAa;AAC7B;AACAZ,MAAAA,EAAE,EAAEI,MAFyB;AAG7BH,MAAAA,IAAI,EAAEC;AAHuB,KAAb,CAAlB;AAKAG,IAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACAL,IAAAA,QAAQ,CAACY,SAAD,CAAR;AACAR,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GATD;;AAUA,QAAMU,QAAQ,GAAIb,EAAD,IAAQ;AACvB,UAAMW,SAAS,GAAGb,KAAK,CAACgB,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACf,EAAL,KAAYA,EAAnC,CAAlB;AACAD,IAAAA,QAAQ,CAACY,SAAD,CAAR;AACD,GAHD;;AAKA,QAAMK,QAAQ,GAAGlB,KAAK,CAACmB,GAAN,CAAWF,IAAD,iBACzB;AAAkB,IAAA,aAAa,EAAE,MAAMF,QAAQ,CAACE,IAAI,CAACf,EAAN,CAA/C;AAAA,cACGe,IAAI,CAACd;AADR,KAASc,IAAI,CAACf,EAAd;AAAA;AAAA;AAAA;AAAA,UADe,CAAjB;AAKA,sBACE;AAAA,4BACE;AAAO,MAAA,KAAK,EAAEE,SAAd;AAAyB,MAAA,QAAQ,EAAEI;AAAnC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEI,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAKM;AAAL;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD,CAtCD;;GAAMnB,e;;KAAAA,e;AAwCN,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst IterationSample = () => {\n  const [names, setNames] = useState([\n    { id: 1, text: '눈사람' },\n    { id: 2, text: '얼음' },\n    { id: 3, text: '눈' },\n    { id: 4, text: '바람' },\n  ]);\n  const [inputText, setInputText] = useState('');\n  const [nextId, setNextId] = useState(5); // 새로운 항목을 추가할 때 사용할 id\n\n  const onChange = (e) => setInputText(e.target.value);\n  const onClick = () => {\n    const nextNames = names.concat({\n      // concat으로 새로운 배열을 만들어 불변성 유지 (vs. push)\n      id: nextId,\n      text: inputText,\n    });\n    setNextId(nextId + 1);\n    setNames(nextNames);\n    setInputText('');\n  };\n  const onRemove = (id) => {\n    const nextNames = names.filter((name) => name.id !== id);\n    setNames(nextNames);\n  };\n\n  const nameList = names.map((name) => (\n    <li key={name.id} onDoubleClick={() => onRemove(name.id)}>\n      {name.text}\n    </li>\n  ));\n  return (\n    <>\n      <input value={inputText} onChange={onChange} />\n      <button onClick={onClick}>추가</button>\n      <ul>{nameList}</ul>;\n    </>\n  );\n};\n\nexport default IterationSample;\n"]},"metadata":{},"sourceType":"module"}